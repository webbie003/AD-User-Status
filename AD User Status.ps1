# Author: webbie003
# Updated: 20-03-2025
# Desc: Simple tool for checking AD user accounts using an XLSX spreadsheet.

# Import required .NET assemblies
Add-Type -AssemblyName System.Drawing
Add-Type -AssemblyName System.Windows.Forms
#Add-Type -AssemblyName Microsoft.VisualBasic
[System.Windows.Forms.Application]::EnableVisualStyles()

function Convert-Base64ToImage {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Base64String
    )

    try {
        $bytes = [System.Convert]::FromBase64String($Base64String)
        $ms = New-Object System.IO.MemoryStream(,$bytes)
        return [System.Drawing.Image]::FromStream($ms)
    }
    catch {
        Write-Warning "Failed to convert Base64 to Bitmap: $_"
        return $null
    }
}

# Base64-encoded icon
$iconBase64 = 'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAh5JREFUSEtjZKAxYKSx+QxYLWCz6/6PbPGvQ6VY1THrZaCo+3tpBoY6DAF0w2EWoVuCbjhMHbolRFsAMgBmCS7DQWrwWsDu0Kfy/9/f2/ji5e+Hu3ijjZmZVfvX+cnXYIpQfIAreJBNJGQBui/oZwGbXXc3AwNDCaFkS4wPGFk4d/w51+8JMgvuA2KCB+x9AnGAnproYwGrXc8eRob/ziDbWQRU4KH058MdOHvZ0kIw+9bnb2C6NqIMLscsoAxnw3zIyMRy68+FKepgH4CCB9lg9HgAWQSyICq6HxxEzSu6wBYgG4yuB6QOlCfAFnD5rQdn+UVTfTHiOC57M1gM5huYC2GGN8xIx9DTkDETLAbKmIycXiv+MbKwM8IMNxBkZrjw/i+KJpAl2CyAGa7Gy4USfCAO2JK/PxkYkV0PMhwEsFkA8wXIB8iuhxn+7/9/hjtfvsMdBvMF2AJ8rgfpQA4mbBbc/fKd4e9/lIIVbBHIErAFWUnGDBbGUhhhCROAWfBtUyA8UYANwBL+MD1XztxhWDNnL2oQ4bIBZAET83/dL+uDroBTnUO3DsM/hsv4LIAHESwVcXKwMMzsBedujAgGCcBcD5OE5XxslrQXzGP4+eM3JBWBNYQe4+T6+RKcg2Dx8ffvf4bEvC1gaXTD0S2pm5rKwMTMBA93EOPXb2YuhuNF31FKU1iKQvYCLsPRLUHWg1z7DUyljzM5kSEBAE/jCyTLI0dwAAAAAElFTkSuQmCC'
$bitmap = Convert-Base64ToImage -Base64String $iconBase64
$icon = [System.Drawing.Icon]::FromHandle($bitmap.GetHicon())

# Create the main GUI window
$form = New-Object System.Windows.Forms.Form
$form.Text = "AD User Status"
$form.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Regular)
$form.MinimumSize = New-Object System.Drawing.Size(800, 600)
$form.StartPosition = "CenterScreen"
try {
    $bitmap = Convert-Base64ToImage -Base64String $iconBase64
    $icon = [System.Drawing.Icon]::FromHandle($bitmap.GetHicon())
    $form.Icon = $icon
}
catch {
}

# Add a status strip for connection status
$statusStrip = New-Object System.Windows.Forms.StatusStrip
$connectionStatus = New-Object System.Windows.Forms.ToolStripStatusLabel
$connectionStatus.Text = "Connection: Checking..."
$statusStrip.Items.Add($connectionStatus)
$form.Controls.Add($statusStrip)

# Setup tab icons
$imgList = New-Object System.Windows.Forms.ImageList
$imgList.ImageSize = New-Object System.Drawing.Size(24, 24)
# Base64-encoded Icons
$commonBase64 = @{
    part1 = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAA"
    part2 = "BHNCSVQICAgIfAhkiAAAAAlwSFlzAAAAsQAAALEBxi1JjQAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAA"
}
$icons = [ordered]@{
    Active     = $commonBase64.part1 + $commonBase64.part2 + "JGSURBVEiJ7ZJNSFRhFIaf8829M6ZOCpIw5ZBC6dIWCW50YeBqxpHBzUBtKlq0rBTNTdCPRoHRukBwFUMOQxDltuiHSilCMKIIkwnLaEAb7zj3fi3MUJm5t6ZddJbnfc/7nAMH/pdHye+Y4vGBdsdRF4F2QIN+orUaTqdHnv41IBYb6hPRtwC1TXK0pi+dHk2VDejpGQgqpRaAYAlL1jQrGpLJc8ulMrZvtZUuEnUJB6gpFHIRtwxXAKjd7jo4joTKBiilM14AET6VDQC5B2RL6/qbaVr3ywakUiNLWstxwC4i2yLqWDI59tUtw+cmAszNPZxtaemYFSEKmD/bOREOp1Kjt73mvd70oFK+C6C7i3g1yJRScnZy8tL0HwNisaEzInoEMEoOm4Lsc7SvUZ7v7Axey+f96YnW/hVPQG/v4GngaqlgAOodao9WYtSam7sL2qeiN/cPzZQExOODbY7DI7fNC6xR11+NWecvJr8JVu04MBY+lYMiX+Q4ct4tHKDQuIJZ52dpMcNiZh6AzPx7JsevAzQvf8/FNrxbgiKR4T1gd7uF5/OrSO364bZdYCo1QWtbB6+ePaArmlg3afZu+LdcYBh2Jx6fZVk51r5YANSHwhyKJng985iuaIJQuAkAB/2u6AUgYdBu+Wityb7IYn22COwKEAo3kTgxsNny0Q4U7hQFaK2nleKyG8Aw/KEKX1Vz5sZiZcPJUItRYwQ2yR8c8cXGm4ZXf63suq5HHXl5pSpQYUVESyNav62urry78T3/Tv0AZqq4JM7iVEkAAAAASUVORK5CYII="
    Disabled   = $commonBase64.part1 + $commonBase64.part2 + "I5SURBVEiJ7ZNLaBNhEMf/M7ubp8VEsaS1xVahwYM3xVz0IJhT2pTYowhioR59lNLai+AjEYr14EFv4k1DG4IiWjwqVJQKHgoV68VXqK1aiN0m2ex4aFNJm93V9OLBOc7M/n7zfd8s8D8cgv6kKZEYiJgmXwEQASCATIrwcDabfLFpQTw+1EMk9wDwupIpgp5sNpWpW9DVNdDAzJ8ANFi0LGqapyWdvpi3YqyfqtpO1GkDB4CthqHH7Bi2AoCb7euAaVJT3QJm+eIkIEKubgFAjwEsWtflh6YVntQtyGSSCyLUC6Bco1wm4lPp9Og3O4ZiVwSAmZln0+HwoWkidALQVtM6EY5nMqkxp++d1nQ/s3IZkGiNXgFogpkujI9fnfprQTw+1E8kSQCqVY9GhDBrslvTXh0JNt7w+L3Z0MiJn46C7u7B8wBGrMAAECLG6WAjAm7fWq5ULi1o7D7adqv3dSW34ZETicEDAFJ2cDIM9AV2VME/5mbx9Pn97cXS0sMPZ697LQWmSZdgcy0A0G4aCHr8VfCxidvY1xGBy+VpNvQt8ZqCWGx45+qDWkaxuIxt/Hv5KvBj0T60hPasQAm7KvWqSVW1fBgOm1Uo6PiqKJbwlZD3NU8AUKsdHABEBC+/z2Fez+PN28kN8JJRmjd114OaJxCRKWZcsxOoqquJ3b6Om59nfWcOJvYG3N7KzwfDKM4prEbb75xcXhvZaWK7yPXf9etLhRiLtIngneLNP2odPadvhvnvxS9XQroB714xcQAAAABJRU5ErkJggg=="
    NotFound   = $commonBase64.part1 + $commonBase64.part2 + "JeSURBVEiJ7ZNPSNNhGMc/77v91OmmbYNSSzQJR3TxYKCHOhTkZToZHiOIjK79EdG8BJUaSHaKLkJ0KpaOEUQK3YIVhXkSjOhQSWKoLWc/J/P3dPAPadtvNS8d+h6f7/N+Pw/v+7zwXzmk/qQpHO5qtCx9E2gEBOSliO6Nxfpf7RoQCvW0KyWPAL3DskRoj8UGonkDWlu7PFrrGcCTpSVhGEUHIpFryWwZO6faTleqxSYcoCydNoN2GbYA0JX2PliWqsgboLV8yQVQitm8AaCeAYnsvnwzjNRY3oBotH9eRHUAaxnsNaX0uUhkaMEuw2FnAkxPv5gKBI5NKUULYGyUTaU4HY0OjOQ6n2tNG7R23AA5laFXQI1rra6OjvZN/DUgFOrpVEr6AWe2HkMpAtqQWsN4c8K7905RiStWPnhmOSegra37CjCYLRigXGku+CvwGoW/lmcQ3VJzr+PtZuG3Rw6Hu48CA3bhKp3mvG8fpQ6DxNI8AImleSxLKlHWw0+XbruyAixLXcfmWgAOWmn8BS6Sy4sMj/QRnxxneKSPpeUFBdSlTXcoIyAY7N2/8aBZtbq6gk+vL1+Zx09TfTPP449pqm+mzONfD1VUZwQ4nWvHybFZqZTJ11UTWL+W+OQYJ5vaiU+O8T25+SXkw1bm9uOqCsQuHxHh9eIccykTf4mXjvZeSt0+jhxqwF3sFYQZa6XgSUaAiExozS07gNNZUKELi+vufn5XfLH6cGCP21cIUOr2AXy0LCtUe//sytbItuPm0GzngxLzRyqoRWpEeO9wJZ9WDV02d5P57+knbIDDjARYMBwAAAAASUVORK5CYII="
    External   = $commonBase64.part1 + "CXBIWXMAAACxAAAAsQHGLUmNAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAABJ5JREFUSInNlX9MlVUYxz/nve+9F+RCQICAiuYPAqxUKDLTuVVkNdHKzdVqK9vCWpatTeeWNdoqV61cm/5XWtNsaT80dLaySaWkA6QfOgmRQAEvcUHg/uDe98c5/fFeCLmO5V91tu/ec96z83zP8zzn+zzwvxqPNmRReTTrWo6IiTZX1awrykzrei83q2NxelqvLyl5SAyF0ghFUlT3xYJAwJ9Te+Lg3S/07lvjvyaCqoYqt8foObig6KcKrzsiFCCVwFZgKcGw4aXmwBP8euI2Qj3JweEe75vU178N1XK8LW38j/lbd6aniQvnl8z75t5Ub0h4XRKvpvBoEremMKKpXOws4Y/z5XhSJMNGeipe1xYWlO5n7l7fhB5UNVS500R76+3FtQW6UGjxXaXAVoKo7ea1HTtxyxAZKRdoPVOMvzUXwjEHodhhzspKWG1f1YNku/twedEPBbpQuOO39moSj6bQNYXXZTI1/0+aO8upa1yBv/cG0DVwjeJ+ZsoNVw3Rsl2bZl8O5ixpuzQPXYBtJRMz0/FoCg0XgVABNU1rqW+9D1t4kMINmhaHACGIu/wyOXsmJxDkZPvfqv3lYc+x5uX4h6azdv9x9pzdiC4Evwfu5MWaI3x8YjO5WR2OMSGcAAv+WTtB96GZTyYQ1DUtm33BX4hpuXn/yLv4B6ex9/Q6Pj/3DHMymnApA6TiuuQAGb4eJzEAKg7GrCUrriCorq7Wkt3BYmxJY8tS/H1TwLDQY2Ea2xfx+KenGBjMJN/XSkvHPPIy20BKsKXzVRKkcqAUKFUKSowSnCrpmdPeUejGtAkEsgkEsiFiki3aKUw/SWTAy8qS7axf9jxeEeRi5yww4wS2BFs5kKNIInV75iiBS7dU6HIKxCyIWjBsQCTGpe5cLvXkUZr9Lco0+b7xISpKd2OEXdw4o56Kit0suLUWYVkIaYIlHdgSgklqjA6UEKt/jqgkTxJJbvDoDlwaCMjPaiPV009vby66HWUo4CM6qJN/fTMVK3fR8N1izh69BRU0UUEDwsYwoacnAejx1KuMSV+c6Q/nlyGVcwvTdp6ggO7gFLDzwLLBsMj0dXHXA4c4eWQpdYcqOHe8BCIGxOLnLKtpJMn6yGRqfvOx/t+yyrClE98RAYlRKSNsi4ULD7HqkW1ITTKjsBFv2gDbjr+BaQCG5RAY8kACQXRYvUPEWIMl09Bth2BEQMpJ3kuvrCOvoA1LgS0FOTPbsKTg5nt+5NQni5wcGlYQqX2UoIOWrZu7CBtbxtSVBFzuS8eQglB4EuHhZEwpMKWLgfZ0iJoOQcx6HZ79a8TuuHJdrVFa9hW6WIFLY7TaAUjFtDktYEs6T08nNa2P5Zs+oKX2Jho+XOwQDFuHUdlXFLvEfjB3rw9ce9C0SidEI+pUjqgsGU+2TVLSENGAx3naUfNrlHgMnguNNedKIOjdZ9Bb8hm+jCimXY5pezGc1xMPwSisQSBqDhE1X4W+9bAxNt7chC2T3B3Z4H4qdXL/qtzijvmg3EiFFdWMrrppTUa/50ukvgPWBia0829G9VH0sg0PzrqjurKoWiV2wv9s/A0g6zz6vOhGAAAAAABJRU5ErkJggg=="
}
# Convert Base64 to Bitmap and add to ImageList
$imgList.Images.Add((Convert-Base64ToImage -Base64String $icons["Active"]))
$imgList.Images.Add((Convert-Base64ToImage -Base64String $icons["Disabled"]))
$imgList.Images.Add((Convert-Base64ToImage -Base64String $icons["NotFound"]))
$imgList.Images.Add((Convert-Base64ToImage -Base64String $icons["External"]))

# Help Window Image
$helpBase64 = ""

# Domain Connection Status Label
$lblDomainStatus = New-Object System.Windows.Forms.Label
$lblDomainStatus.Text = "Searching for a responsive Domain Controller..."
$lblDomainStatus.Location = New-Object System.Drawing.Point(20, 50)
$lblDomainStatus.Size = New-Object System.Drawing.Size(550, 20)
$form.Controls.Add($lblDomainStatus)

 #################################################
# <--------------GLOBAL_VARIABLES---------------> #
 #################################################

# Global Variables
if ($null -eq $script:sync) {
    $script:sync = @{}
}

 #################################################
# <------------------FUNCTIONS------------------> #
 #################################################

function Show-HelpWindow {
    Add-Type -AssemblyName System.Windows.Forms
    Add-Type -AssemblyName System.Drawing

    $helpForm = New-Object System.Windows.Forms.Form
    $helpForm.Text = "Help & FAQ"
    $helpForm.Size = New-Object System.Drawing.Size(650, 650)
    $helpForm.StartPosition = "CenterScreen"
    $helpForm.BackColor = 'White'
    $helpForm.FormBorderStyle = "FixedDialog"
    $helpForm.MaximizeBox = $false
    $helpForm.KeyPreview = $true

    # Close form on Esc key
    $helpForm.Add_KeyDown({
        if ($_.KeyCode -eq 'Escape') {
            $helpForm.Close()
        }
    })

    # Layout Manager
    $layout = New-Object Windows.Forms.TableLayoutPanel
    $layout.Dock = 'Fill'
    $layout.RowCount = 2
    $layout.ColumnCount = 1
    $layout.RowStyles.Add((New-Object Windows.Forms.RowStyle([Windows.Forms.SizeType]::Percent, 100)))
    $layout.RowStyles.Add((New-Object Windows.Forms.RowStyle([Windows.Forms.SizeType]::Absolute, 60)))
    $helpForm.Controls.Add($layout)

    # === Scrollable Panel ===
    $scrollPanel = New-Object Windows.Forms.Panel
    $scrollPanel.Dock = 'Fill'
    $scrollPanel.AutoScroll = $true
    $scrollPanel.BackColor = 'White'
    $layout.Controls.Add($scrollPanel, 0, 0)

    # === Bottom Panel with Close Button ===
    $bottomPanel = New-Object Windows.Forms.Panel
    $bottomPanel.Dock = 'Fill'
    $bottomPanel.BackColor = 'White'

    $closeButton = New-Object Windows.Forms.Button
    $closeButton.Text = "Close"
    $closeButton.Size = New-Object Drawing.Size(100, 30)
    #$closeButton.Anchor = 'Bottom, Right'
    $closeButton.Location = New-Object Drawing.Point(520, 10)
    $closeButton.Add_Click({ $helpForm.Close() })
    $bottomPanel.Controls.Add($closeButton)

    $layout.Controls.Add($bottomPanel, 0, 1)

    # === Top Banner Panel ===
    $topPanel = New-Object System.Windows.Forms.FlowLayoutPanel
    $topPanel.FlowDirection = "LeftToRight"
    $topPanel.Dock = "Top"
    $topPanel.AutoSize = $true
    $topPanel.WrapContents = $false
    $topPanel.Padding = '10,10,10,10'

    # Load Banner Image (Optional)
    $bannerImage = Convert-Base64ToImage -Base64 $iconBase64
    if ($bannerImage) {
        $bannerBox = New-Object Windows.Forms.PictureBox
        $bannerBox.Image = $bannerImage
        $bannerBox.Size = New-Object Drawing.Size(32, 32)
        $bannerBox.SizeMode = 'StretchImage'
        #$bannerBox.Margin = '5'
        $topPanel.Controls.Add($bannerBox)
    }

    # Title Label
    $titleLabel = New-Object System.Windows.Forms.Label
    $titleLabel.Text = "Welcome to the AD User Status Tool Help!"
    $titleLabel.Font = New-Object Drawing.Font("Segoe UI", 16, [Drawing.FontStyle]::Bold)
    $titleLabel.AutoSize = $true
    $titleLabel.TextAlign = 'MiddleLeft'
    $topPanel.Controls.Add($titleLabel)

    $scrollPanel.Controls.Add($topPanel)

    # === Help Content ===
    $helpContent = @(
        "",
        "Tab Descriptions",
        "● Active Accounts: Accounts found to be enabled and accessible.",
        "● Disabled Accounts: Accounts exist but have been deactivated.",
        "● Accounts Not Found: Accounts could not be located in the Active Directory.",
        "● External Accounts: Accounts belong to third-party or external services.",
        "",
        "Excel 'Import' File",
        "● Input File: Must be an Excel file (.xlsx)",
        "● The Excel file must be formatted with the three columns below:",
        "---INSERT_IMAGE_HERE---",
        "",
        "Note:",
        "If you don't have an Internal ID, just use any random number — they can all be the same for now."
    )

    $yPos = $topPanel.Height + 10
    foreach ($line in $helpContent) {
        if ($line -eq "---INSERT_IMAGE_HERE---") {
            $image = Convert-Base64ToImage -Base64String $helpBase64
            if ($image) {
                $borderPanel = New-Object System.Windows.Forms.Panel
                $borderPanel.BackColor = 'LightSteelBlue'  # Light gray border color
                $borderPanel.Padding = New-Object System.Windows.Forms.Padding(3)
                $borderPanel.Size = New-Object Drawing.Size(449, 130)  # Picture size + padding
                $borderPanel.Location = New-Object Drawing.Point((($helpForm.ClientSize.Width - $borderPanel.Width) / 2), ($yPos + 10))
                $picBox = New-Object System.Windows.Forms.PictureBox
                $picBox.Image = $image
                $picBox.SizeMode = 'Zoom'
                $picBox.Dock = 'Fill'
                $picBox.BackColor = 'LightSteelBlue'
                #$picBox.Size = New-Object Drawing.Size(460, 130)
                #$picBox.Location = New-Object Drawing.Point((($helpForm.Width - $picBox.Width - 20) / 2), ($yPos + 10))
                #$picBox.BorderStyle = 'FixedSingle'
                $borderPanel.Controls.Add($picBox)
                $scrollPanel.Controls.Add($borderPanel)
                $yPos += $picBox.Height + 20
            }
            continue
        }

        $label = New-Object Windows.Forms.Label
        $label.AutoSize = $true
        $label.Location = New-Object Drawing.Point(20, $yPos)

        if ($line -match "^(Tab Descriptions|Excel 'Import' File|Note:)$") {
            $label.Font = New-Object Drawing.Font("Segoe UI", 10, [Drawing.FontStyle]::Bold)
        } else {
            $label.Font = New-Object Drawing.Font("Segoe UI", 10)
        }

        $label.Text = $line
        $scrollPanel.Controls.Add($label)
        $yPos += 20
    }

    $helpForm.ShowDialog()
}

# Function to create the progress window
function Show-ProgressWindow {
    param(
        [ref]$progressForm,
        [ref]$progressBar,
        [ref]$btnCancel,
        [ref]$lblStatus,
        [System.IO.MemoryStream]$stream
    )

    # Initialize Progress Form
    $progressForm.Value = New-Object System.Windows.Forms.Form
    $progressForm.Value.Size = New-Object System.Drawing.Size(400, 120)
    $progressForm.Value.StartPosition = "CenterScreen"
    $progressForm.Value.TopMost = $true
    $progressForm.Value.ShowInTaskbar = $false
    $progressForm.Value.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow
    $progressForm.Value.ControlBox = $false
    
    # Status Label
    $lblStatus.Value = New-Object System.Windows.Forms.Label
    $lblStatus.Value.Text = "Gathering account information..."
    $lblStatus.Value.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Bold)
    $lblStatus.Value.TextAlign = 'MiddleCenter'
    $lblStatus.Value.Location = New-Object System.Drawing.Point(20, 10)
    $lblStatus.Value.Size = New-Object System.Drawing.Size(350, 20)
    $progressForm.Value.Controls.Add($lblStatus.Value)

    # Progress Bar
    $progressBar.Value = New-Object System.Windows.Forms.ProgressBar
    $progressBar.Value.Location = New-Object System.Drawing.Point(20, 40)
    $progressBar.Value.Size = New-Object System.Drawing.Size(($progressForm.Value.ClientSize.Width - 30), 25)
    $progressBar.Value.Style = 'Continuous'
    $progressForm.Value.Controls.Add($progressBar.Value)

    # Force UI refresh
    $lblStatus.Value.Refresh()
    $progressForm.Value.Refresh()
    [System.Windows.Forms.Application]::DoEvents()

    # Cancel Button
    $btnCancel.Value = New-Object System.Windows.Forms.Button
    $btnCancel.Value.Text = "Cancel"
    $btnCancel.Value.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Regular)
    $btnCancel.Value.Size = New-Object System.Drawing.Size(80, 25)
    $btnCancel.Value.Location = New-Object System.Drawing.Point(160, 80)
    $btnCancel.Value.Add_Click({
        # Set the cancel flag
        $script:sync["CancelProcessing"] = $true  

        # Allow UI updates before closing
        [System.Windows.Forms.Application]::DoEvents()

        # Close the progress form
        if ($progressForm.Value -and !$progressForm.Value.IsDisposed) {
            $progressForm.Value.Invoke([Action] { $progressForm.Value.Close() })
        }
    })
    Enable-DoubleBuffering -Control $progressForm.Value
    Enable-DoubleBuffering -Control $progressBar.Value
    $progressForm.Value.Controls.Add($btnCancel.Value)

    # Ensure the progress form is properly created before showing it
    if ($progressForm.Value) {
        $progressForm.Value.Show() # | Out-Null
    }
}

# Confirms full LDAPS functionality, not just the ability to connect.
function Test-LDAPSConnection {
    param (
        [Parameter(Mandatory = $true)]
        [string]$adServer
    )

    try {
        $ldapIdentifier = "$adServer:636"
        $ldapConnection = New-Object System.DirectoryServices.Protocols.LdapConnection($ldapIdentifier)

        $ldapConnection.AuthType = [System.DirectoryServices.Protocols.AuthType]::Negotiate

        # Configure SSL and optionally validate certs
        $ldapConnection.SessionOptions.SecureSocketLayer = $true
        $ldapConnection.SessionOptions.VerifyServerCertificate = {
            param ($conn, $cert)

            # TODO: Replace this with actual cert validation if needed
            return $true
        }

        try {
            # Attempt to bind
            $ldapConnection.Bind()

            # Basic rootDSE search
            $searchRequest = New-Object System.DirectoryServices.Protocols.SearchRequest `
                "", "(objectClass=*)", `
                [System.DirectoryServices.Protocols.SearchScope]::Base, `
                @("defaultNamingContext")

            $searchResponse = $ldapConnection.SendRequest($searchRequest)

            return ($searchResponse.Entries.Count -gt 0)
        }
        finally {
            $ldapConnection.Dispose()
        }
    }
    catch {
        # Optional: log the error detail somewhere
        # Write-Warning "LDAPS connection failed to $adServer: $_"
        return $false
    }
}

# Secure Get-ADUserNet Function with Escaping Built-in
$GetADUserNetScriptBlock = {
    param ($samAccountName, $adServer)

    # Validate Input, preventing empty or null samAccountName inputs
    if ([string]::IsNullOrWhiteSpace($samAccountName)) { return $null }

    # Protects against LDAP injection attacks by escaping special characters like: * ( ) \ | & /
    $safeSamAccountName = $samAccountName -replace '([\\\*\(\)\|\&\/])', '\\$1'

    try {
        # Connect to the AD Server
        $connectionString = if ($script:protocol -eq "LDAPS") {
            "LDAP://$adServer:636"  # Explicit LDAPS port
        } else {
            "LDAP://$adServer"      # Default LDAP port (389)
        }
        if (-not $global:ADConnection) {
            $global:ADConnection = New-Object DirectoryServices.DirectoryEntry($connectionString)
        }
        $Searcher = New-Object DirectoryServices.DirectorySearcher($global:ADConnection)
        $Searcher = New-Object DirectoryServices.DirectorySearcher($rootDSE)
        $Searcher.Filter = "(&(objectClass=user)(samAccountName=$safeSamAccountName))"
        # Define properties to retrieve
        $Searcher.PropertiesToLoad.AddRange(@("displayName", "mail", "userAccountControl"))

        # Optimize Search Performance
        $Searcher.PageSize = 1
        $Searcher.SizeLimit = 1
        $Searcher.SearchScope = "Subtree"

        # Retrieve the AD User
        $result = $Searcher.FindOne()

        if ($result -and $result.Properties) {
            $userAccountControl = $result.Properties["useraccountcontrol"][0]

            # Return user information securely
            return @{
                Name    = ($result.Properties["displayname"] -join ", ")
                Email   = ($result.Properties["mail"] -join ", ")
                Enabled = ($userAccountControl -band 2) -eq 0  # Enabled if bit is NOT set
            }
        }
    }
    catch {
        # Optionally log the error for debugging
        #Write-Host "⚠️ LDAP Query Error for $safeSamAccountName: $_"
    }
    return $null
}

# Refined function to find the best domain controller
function Get-ActiveDirectoryServer {
    param (
        [System.Windows.Forms.Label]$lblDomainStatus,
        [System.Windows.Forms.Form]$form
    )

    try {
        # Get the domain name
        $domainName = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Name

        # Try to resolve the PDC
        $pdcRecord = Resolve-DnsName -Type SRV "_ldap._tcp.pdc._msdcs.$domainName" -ErrorAction Stop
        $pdc = ($pdcRecord | Select-Object -First 1).NameTarget.ToUpper()

        if ($pdc) {
            # Update label - connected to PDC
            $lblDomainStatus.ForeColor = 'Black'
            $lblDomainStatus.Text = "Connected: $pdc"
            return $pdc
        }
    }
    catch {
        # PDC not found - inform user
        $lblDomainStatus.ForeColor = 'Orange'
        $lblDomainStatus.Text = "PDC not found. Searching alternative DC(s)..."
    }

    # Try alternative DCs
    try {
        $altDCRecord = Resolve-DnsName -Type SRV "_ldap._tcp.dc._msdcs.$domainName" -ErrorAction Stop
        $dc = ($altDCRecord | Select-Object -First 1).NameTarget.ToUpper()

        if ($dc) {
            # Update label - using alternative DC
            $lblDomainStatus.ForeColor = 'Black'
            $lblDomainStatus.Text = "Using alternative DC: $dc"
            return $dc
        }
    }
    catch {
        # No DCs found - critical failure
        $lblDomainStatus.ForeColor = 'Red'
        $lblDomainStatus.Text = "No available domain controllers found."
        return $null
    }
}

# Define a function to show a system tray notification without blocking
$ShowNotificationScriptBlock = {
    param(
        [string]$Title = "Notification",
        [string]$Message = "Task completed successfully!",
        [ValidateSet("None", "Info", "Warning", "Error")]
        [string]$Icon = "Info"
    )

    try {
        # Initialize NotifyIcon
        $notify = New-Object System.Windows.Forms.NotifyIcon
        $notify.Icon = [System.Drawing.SystemIcons]::Information
        $notify.BalloonTipIcon = $Icon
        $notify.BalloonTipTitle = $Title
        $notify.BalloonTipText = $Message
        $notify.Visible = $true

        # Show the notification
        $notify.ShowBalloonTip(3000)

        # Timer to dispose after delay
        $timer = New-Object System.Windows.Forms.Timer
        $timer.Interval = 4000

        $timer.Add_Tick({
            try {
                if ($notify.Visible) {
                    $notify.Dispose()
                }
            } catch {}

            try {
                $timer.Stop()
                $timer.Dispose()
            } catch {}
        })

        $timer.Start()
    }
    catch {
        Write-Warning "Failed to show notification: $_"
    }
}

function Enable-DoubleBuffering {
    param (
        [Parameter(Mandatory = $true)]
        [System.Windows.Forms.Control]$Control
    )

    try {
        $controlType = $Control.GetType()
        $doubleBufferProperty = $controlType.GetProperty(
            "DoubleBuffered",
            [System.Reflection.BindingFlags]::NonPublic -bor [System.Reflection.BindingFlags]::Instance
        )

        if ($doubleBufferProperty -and $doubleBufferProperty.CanWrite) {
            $doubleBufferProperty.SetValue($Control, $true, $null)
        }
        else {
            Write-Warning "DoubleBuffered property not found or not writable on $($Control.GetType().FullName)"
        }
    }
    catch {
        Write-Warning "Failed to enable double buffering: $_"
    }
}

# Start background job to retrieve Internal UPN Suffixes
function Get-InternalUPNsInBackground {
    param (
        [string]$adServer,
        [string]$protocol,
        [hashtable]$sync,
        [ref]$progressForm  # Reserved for future UI updates
    )

    # Create a dedicated runspace
    $runspace = [runspacefactory]::CreateRunspace()
    $runspace.ApartmentState = 'STA'
    $runspace.ThreadOptions = 'ReuseThread'
    $runspace.Open()

    $ps = [PowerShell]::Create()
    $ps.Runspace = $runspace

    # Add background script
    $ps.AddScript({
        param ($adServer, $protocol, $sync)

        try {
            $connectionString = if ($protocol -eq 'LDAPS') {
                "LDAP://$adServer:636"
            } else {
                "LDAP://$adServer"
            }

            $rootDSE = [ADSI]("$connectionString/RootDSE")
            $defaultNamingContext = $rootDSE.Properties["defaultNamingContext"][0]

            $searcher = New-Object System.DirectoryServices.DirectorySearcher
            $searcher.SearchRoot = [ADSI]("$connectionString/$defaultNamingContext")
            $searcher.Filter = "(&(objectClass=user)(userPrincipalName=*))"
            $searcher.PropertiesToLoad.Add("userPrincipalName")
            $searcher.PageSize = 1000
            $searcher.SizeLimit = 10000

            $results = $searcher.FindAll()
            $searcher.Dispose()

            $upnSuffixes = @{}

            foreach ($result in $results) {
                if ($sync["CancelProcessing"]) {
                    return @()
                }

                if ($result.Properties["userPrincipalName"]) {
                    $upn = $result.Properties["userPrincipalName"][0]
                    $suffix = ($upn -split "@")[-1]
                    if ($suffix -and !$upnSuffixes.ContainsKey($suffix)) {
                        $upnSuffixes[$suffix] = $true
                    }
                }
            }

            return $upnSuffixes.Keys | Sort-Object | ForEach-Object { $_.ToLower().Trim() }
        }
        catch {
            return @()
        }
    }).AddArgument($adServer).AddArgument($protocol).AddArgument($sync)

    # Kick off background job
    $asyncResult = $ps.BeginInvoke()

    return @{
        Runspace    = $runspace
        PowerShell  = $ps
        AsyncResult = $asyncResult
    }
}

 #################################################
# <------------------VARIABLES------------------> #
 #################################################

# Variables to store progress window components
$progressForm = [ref]$null
$progressBar = [ref]$null
$btnCancel = [ref]$null
$lblStatus = [ref]$null

$adServer = (Get-ActiveDirectoryServer -lblDomainStatus $lblDomainStatus -form $form)

# Internal UPNs Array
$script:InternalUPNs = @()

 #################################################
# <--------------------MAIN---------------------> #
 #################################################

# Label for import file
$lblFile = New-Object System.Windows.Forms.Label
$lblFile.Text = "Excel File:"
$lblFile.Location = New-Object System.Drawing.Point(20, 19)
$lblFile.Size = New-Object System.Drawing.Size(70, 20)
$form.Controls.Add($lblFile)

# TextBox to display selected import file
$txtFile = New-Object System.Windows.Forms.TextBox
$txtFile.Location = New-Object System.Drawing.Point(90, 17)
$txtFile.Size = New-Object System.Drawing.Size(($form.ClientSize.Width - 225), 20)
$txtFile.Anchor = [System.Windows.Forms.AnchorStyles]::Top -bor [System.Windows.Forms.AnchorStyles]::Left -bor [System.Windows.Forms.AnchorStyles]::Right
$form.Controls.Add($txtFile)

# Browse Button
$btnBrowse = New-Object System.Windows.Forms.Button
$btnBrowse.Text = "Browse"
$btnBrowse.AutoSize = $true
$btnBrowse.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Regular)
$btnBrowse.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 130), 15)
$btnBrowse.Anchor = [System.Windows.Forms.AnchorStyles]::Top -bor [System.Windows.Forms.AnchorStyles]::Right
$btnBrowse.Add_Click({
    $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $openFileDialog.Filter = "Excel Files (*.xlsx;*.xls)|*.xlsx;*.xls|CSV Files (*.csv)|*.csv"
    if ($openFileDialog.ShowDialog() -eq "OK") {
        $txtFile.Text = $openFileDialog.FileName
    }
})
$form.Controls.Add($btnBrowse)

# Add a Help Button
$btnHelp = New-Object System.Windows.Forms.Button
$btnHelp.Text = "?"
$btnHelp.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Bold)
$btnHelp.Width = 30
$btnHelp.Height = 30
$btnHelp.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 50), 15)
$btnHelp.Anchor = [System.Windows.Forms.AnchorStyles]::Top -bor [System.Windows.Forms.AnchorStyles]::Right
$btnHelp.Add_Click({
    Show-HelpWindow
})
$form.Controls.Add($btnHelp)

# Tab Control for results
$tabControl = New-Object System.Windows.Forms.TabControl
$tabControl.Size = New-Object System.Drawing.Size(($form.ClientSize.Width - 40), 410)
$tabControl.Location = New-Object System.Drawing.Point(20, 80)
$tabControl.ImageList = $imgList
# Enable auto-resizing when the form resizes
$tabControl.Anchor = [System.Windows.Forms.AnchorStyles]::Top -bor `
                      [System.Windows.Forms.AnchorStyles]::Bottom -bor `
                      [System.Windows.Forms.AnchorStyles]::Left -bor `
                      [System.Windows.Forms.AnchorStyles]::Right

# Active Accounts Tab
$tabEnabled = New-Object System.Windows.Forms.TabPage
$tabEnabled.ImageIndex = 0
$lstEnabled = New-Object System.Windows.Forms.ListView
$lstEnabled.View = 'Details'
$lstEnabled.FullRowSelect = $true
$lstEnabled.GridLines = $true
$lstEnabled.Dock = "Fill"
$lstEnabled.Columns.Add("Internal ID", 100) | Out-Null
$lstEnabled.Columns.Add("Name", 250) | Out-Null
$lstEnabled.Columns.Add("Email", -2) | Out-Null
$tabEnabled.Text = "Active Accounts ($($lstEnabled.Items.Count))"
$tabEnabled.Controls.Add($lstEnabled)

# Disabled Accounts Tab
$tabDisabled = New-Object System.Windows.Forms.TabPage
$tabDisabled.ImageIndex = 1
$lstDisabled = New-Object System.Windows.Forms.ListView
$lstDisabled.View = 'Details'
$lstDisabled.FullRowSelect = $true
$lstDisabled.GridLines = $true
$lstDisabled.Dock = "Fill"
$lstDisabled.Columns.Add("Internal ID", 100) | Out-Null
$lstDisabled.Columns.Add("Name", 250) | Out-Null
$lstDisabled.Columns.Add("Email", -2) | Out-Null
$tabDisabled.Text = "Disabled Accounts ($($lstDisabled.Items.Count))"
$tabDisabled.Controls.Add($lstDisabled)

# Not Found Tab
$tabNotFound = New-Object System.Windows.Forms.TabPage
$tabNotFound.ImageIndex = 2
$lstNotFound = New-Object System.Windows.Forms.ListView
$lstNotFound.View = 'Details'
$lstNotFound.FullRowSelect = $true
$lstNotFound.GridLines = $true
$lstNotFound.Dock = "Fill"
$lstNotFound.Columns.Add("Internal ID", 100) | Out-Null
$lstNotFound.Columns.Add("Name", 250) | Out-Null
$lstNotFound.Columns.Add("Email", -2) | Out-Null
$tabNotFound.Text = "Accounts Not Found ($($lstNotFound.Items.Count))"
$tabNotFound.Controls.Add($lstNotFound)

# External Accounts Tab
$tabExtAccount = New-Object System.Windows.Forms.TabPage
$tabExtAccount.ImageIndex = 3
$lstExtAccount = New-Object System.Windows.Forms.ListView
$lstExtAccount.View = 'Details'
$lstExtAccount.FullRowSelect = $true
$lstExtAccount.GridLines = $true
$lstExtAccount.Dock = "Fill"
$lstExtAccount.Columns.Add("Internal ID", 100) | Out-Null
$lstExtAccount.Columns.Add("Name", 250) | Out-Null
$lstExtAccount.Columns.Add("Email", -2) | Out-Null
$tabExtAccount.Text = "External Accounts ($($lstExtAccount.Items.Count))"
$tabExtAccount.Controls.Add($lstExtAccount)

# Dynamically resize the Email column when the form is resized
$form.Add_Resize({
    $listViews = @($lstEnabled, $lstDisabled, $lstNotFound, $lstExtAccount)
    foreach ($listView in $listViews) {
        $totalWidth = $listView.ClientSize.Width
        $listView.Columns[2].Width = $totalWidth - ($listView.Columns[0].Width + $listView.Columns[1].Width + 4)
    }
})

function Update-TabCounts {
    if ($form -and !$form.IsDisposed) {
        $form.Invoke([Action] {
            # Update tab counts
            $tabEnabled.Text = "Active Accounts ($($lstEnabled.Items.Count))"
            $tabDisabled.Text = "Disabled Accounts ($($lstDisabled.Items.Count))"
            $tabNotFound.Text = "Accounts Not Found ($($lstNotFound.Items.Count))"
            $tabExtAccount.Text = "External Accounts ($($lstExtAccount.Items.Count))"

            # Show or hide Export button based on item count
            $btnExport.Visible = $true

            # Force tab control refresh
            $tabControl.Refresh()
        })
    }
}

# Add all tabs to the TabControl
$tabControl.TabPages.AddRange(@($tabEnabled, $tabDisabled, $tabNotFound, $tabExtAccount))
# Enable double buffering to reduce flickering
Enable-DoubleBuffering -Control $form
Enable-DoubleBuffering -Control $tabControl
$form.Controls.Add($tabControl)

# Export Button
$btnExport = New-Object System.Windows.Forms.Button
$btnExport.Text = "Export Results"
#$btnExport.AutoSize = $true
$btnExport.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Regular)
$btnExport.Size = New-Object System.Drawing.Size(120, 30)  # Set Fixed Size
$btnExport.Location = New-Object System.Drawing.Point((($form.ClientSize.Width / 2) - ($btnExport.Width / 2)), ($form.ClientSize.Height - 60))
$btnExport.Anchor = [System.Windows.Forms.AnchorStyles]::Bottom
$btnExport.Enabled = $false # Disabled by default until there are results to export.
$btnExport.Add_Click({
    # Create a SaveFileDialog to choose the export location
    $saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
    $saveFileDialog.Filter = "CSV File (*.csv)|*.csv"
    $saveFileDialog.Title = "Export Results to CSV"

    if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        $exportPath = $saveFileDialog.FileName

        # Combine data from all ListViews into CSV format
        $allData = @()

        # Helper function to extract items from a ListView
        function Get-ListViewData {
            param ($listView, $category)
            $listView.Items | ForEach-Object {
                [PSCustomObject]@{
                    Category     = $category
                    InternalID   = $_.SubItems[0].Text
                    Name         = $_.SubItems[1].Text
                    Email        = $_.SubItems[2].Text
                }
            }
        }

        # Gather data from each list
        $allData += Get-ListViewData -listView $lstEnabled -category "Active Account"
        $allData += Get-ListViewData -listView $lstDisabled -category "Disabled Account"
        $allData += Get-ListViewData -listView $lstNotFound -category "Account Not Found"
        $allData += Get-ListViewData -listView $lstExtAccount -category "External Account"

        # Export to CSV
        $allData | Export-Csv -Path $exportPath -NoTypeInformation -Encoding UTF8

        # Confirmation Message
        #[System.Windows.Forms.MessageBox]::Show("Export completed successfully!", "Export", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        
        $form.Invoke([Action] {
            # Show cancellation notification using the existing script block
            & $ShowNotificationScriptBlock -Title "Export completed successfully!" -Message "Results successfully exported: $exportPath" -Icon "Info"

            # Optional: Play a system sound for cancellation
            #[System.Media.SystemSounds]::Exclamation.Play()
        })

    }
})
$form.Controls.Add($btnExport)

# Process Button
$btnProcess = New-Object System.Windows.Forms.Button
$btnProcess.Text = "Check Users"
#$btnProcess.AutoSize = $true
$btnProcess.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Regular)
$btnProcess.Size = New-Object System.Drawing.Size(100, 30)  # Set Fixed Size
$btnProcess.Location = New-Object System.Drawing.Point(20, ($form.ClientSize.Height - 60))
$btnProcess.Anchor = [System.Windows.Forms.AnchorStyles]::Bottom -bor [System.Windows.Forms.AnchorStyles]::Left
$btnProcess.Add_Click({
    # Clear tabs & tab titles
    $lstEnabled.Invoke([Action] { $lstEnabled.Items.Clear() })
    $lstDisabled.Invoke([Action] { $lstDisabled.Items.Clear() })
    $lstNotFound.Invoke([Action] { $lstNotFound.Items.Clear() })
    $lstExtAccount.Invoke([Action] { $lstExtAccount.Items.Clear() })
    $tabExtAccount.Text = "External Accounts ($($lstExtAccount.Items.Count))" 
    $tabEnabled.Text = "Active Accounts ($($lstEnabled.Items.Count))"
    $tabDisabled.Text = "Disabled Accounts ($($lstDisabled.Items.Count))"
    $tabNotFound.Text = "Accounts Not Found ($($lstNotFound.Items.Count))"

    # Ensure file is selected
    if ([string]::IsNullOrWhiteSpace($txtFile.Text) -or -not (Test-Path $txtFile.Text)) {
        [System.Windows.Forms.MessageBox]::Show("Select a valid Excel file.", "Error", "OK", "Error")
        return
    }

    # Ensure Active Directory is available
    if (-not $adServer) {
        [System.Windows.Forms.MessageBox]::Show("Active Directory is not reachable. Running in offline mode.", "Warning", "OK", "Warning")
        return
    }

    # Reset Cancel Flag
    $script:sync["CancelProcessing"] = $false 

    # Disable button while processing
    $btnProcess.Enabled = $false

    # Show progress window
    Show-ProgressWindow -progressForm ([ref]$progressForm) -progressBar ([ref]$progressBar) -btnCancel ([ref]$btnCancel) -lblStatus $lblStatus -stream $stream

    # Run the UPN retrieval function in the background
    if (-not $script:InternalUPNs -or $script:InternalUPNs.Count -eq 0) {
        $upnTask = Get-InternalUPNsInBackground -adServer $adServer -protocol $script:protocol -sync $script:sync -progressForm ([ref]$progressForm)

        # Update the progress form while waiting for completion
        while (-not $upnTask.AsyncResult.IsCompleted) {
            if ($script:sync["CancelProcessing"]) {
                # Cancel processing safely
                try {
                    $upnTask.PowerShell.Stop()
                    $upnTask.PowerShell.Dispose()
                    $upnTask.Runspace.Close()
                    $upnTask.Runspace.Dispose()
                } catch {
                    Write-Host "Error while cleaning up runspace: $_"
                }

                # Close the progress form
                if ($progressForm -and !$progressForm.Value.IsDisposed) {
                    $progressForm.Value.Invoke([Action] { $progressForm.Value.Close() })
                }

                # Re-enable the Check Users button
                if ($btnProcess -and !$btnProcess.IsDisposed) {
                    $btnProcess.Invoke([Action] { $btnProcess.Enabled = $true })
                }

                # Exit the function early due to cancellation
                return
            }
            Start-Sleep -Milliseconds 200
        }

        # Retrieve the results from the background task only if not canceled
        if (-not $script:sync["CancelProcessing"]) {
            $script:InternalUPNs = $upnTask.PowerShell.EndInvoke($upnTask.AsyncResult)
        }

        # Cleanup
        try {
            $upnTask.PowerShell.Dispose()
            $upnTask.Runspace.Close()
            $upnTask.Runspace.Dispose()
        } catch {
            Write-Host "Cleanup error: $_"
        }

        # Re-enable the button if the process wasn't canceled
        if (-not $script:sync["CancelProcessing"]) {
            if ($btnProcess -and !$btnProcess.IsDisposed) {
                $btnProcess.Invoke([Action] { $btnProcess.Enabled = $true })
            }
        }
    }

    # Create a RunspacePool dynamically adjusting based on CPU cores
    $maxThreads = [Environment]::ProcessorCount
    $runspacePool = [runspacefactory]::CreateRunspacePool(1, $maxThreads)
    $runspacePool.Open()

    # Prepare PowerShell Runspace
    $psInstance = [powershell]::Create()
    $psInstance.RunspacePool = $runspacePool
    
    # Define the Script Block
    $psInstance.AddScript({
        param(
            $filePath, $adServer, $InternalUPNs, $progressForm, $progressBar, $btnProcess,
            $sync, $lstEnabled, $lstDisabled, $lstNotFound, $lstExtAccount, $GetADUserNetScriptBlock,
            $ShowNotificationScriptBlock, $lblStatus, $tabExtAccount, $tabEnabled,
            $tabDisabled, $tabNotFound, $btnExport, $form, $protocol  # Add this
        )

        # Initialize Excel COM Object
        $excel = New-Object -ComObject Excel.Application
        $excel.Visible = $false
        $excel.DisplayAlerts = $false
        $excel.ScreenUpdating = $false   # Prevent UI Rendering (BIG BOOST)
        $excel.Calculation = -4135       # Set to Manual Calculation
        $excel.EnableEvents = $false     # Disable Event Processing
        $wb = $excel.Workbooks.Open($filePath, $true, $true)  # 🚀 Open as Read-Only
        $ws = $wb.Sheets.Item(1)

        # Retrieve UsedRange to improve performance
        $rawRange = $ws.UsedRange.Value2  

        # Close Workbook Properly
        $wb.Close($false)
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($wb) | Out-Null
        # Quit Excel and Release Memory
        $excel.Quit()
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null
        [System.GC]::Collect()
        [System.GC]::WaitForPendingFinalizers()
    
        # If user cancels, close progress window
        if ($sync["CancelProcessing"]) {
            if ($progressForm -ne $null) {
                $progressForm.Invoke([Action] { $progressForm.Close() })
            }
            return
        }

        # Process Data Efficiently
        $processedRows = [System.Collections.Generic.List[PSCustomObject]]::new()

        if ($rawRange -is [array]) {
            $rowCount = $rawRange.GetLength(0)  # Get total rows

            for ($i = 1; $i -le $rowCount; $i++) {
                #$internalID = if ($rawRange[$i, 1] -ne $null) { $rawRange[$i, 1].ToString().Trim() } else { $null }
                #$name       = if ($rawRange[$i, 2] -ne $null) { $rawRange[$i, 2].ToString().Trim() } else { $null }
                #$email      = if ($rawRange[$i, 3] -ne $null) { $rawRange[$i, 3].ToString().Trim() } else { $null }
                $internalID = $rawRange[$i, 1] -as [string]
                $name       = $rawRange[$i, 2] -as [string]
                $email      = $rawRange[$i, 3] -as [string]

                # Trim & Skip Empty Rows
                if (-not $internalID -and [string]::IsNullOrWhiteSpace($name) -and [string]::IsNullOrWhiteSpace($email)) {
                    continue
                }

                # Store Processed Row as a PSCustomObject (More Efficient)
                $processedRows.Add([PSCustomObject]@{
                    InternalID = $internalID.Trim()
                    Name       = $name.Trim()
                    Email      = $email.Trim()
                })
            }
        }
#>
        # Update total processed accounts
        $totalRows = $processedRows.Count - 1

        # Update status label
        if ($progressForm -and !$progressForm.IsDisposed) {
            $progressForm.Invoke([Action] { 
                $lblStatus.Value.Text = "Processing $totalRows Accounts..."
                $lblStatus.Value.Refresh()
            })
            [System.Windows.Forms.Application]::DoEvents()
        }
        
        if ($sync["CancelProcessing"]) {
            if ($progressForm -ne $null) {
                $progressForm.Invoke([Action] { $progressForm.Close() })
            }
            break
        }
        $counter = 1
        # Process Users
        foreach ($i in $processedRows | Select-Object -Skip 1) {
            $counter++
            # Check if "Cancel" was clicked
            if ($sync["CancelProcessing"]) {
                if ($progressForm -ne $null) {
                    $progressForm.Invoke([Action] { $progressForm.Close() })
                }
                break
            }
            $email = ($i.Email).ToString().ToLower().Trim()
            $samAccountName = ($email -split "@")[0] -replace "\s", ""
            $isInternal = $internalUPNs -contains (($email -split "@")[-1].ToLower().Trim())
            $listViewItem = New-Object System.Windows.Forms.ListViewItem($i.InternalID.ToString())
            $listViewItem.SubItems.Add($i.Name.ToString())
            $listViewItem.SubItems.Add($email.ToString())# + " - " + $processedRows.Email) #<-- Test Area
          
            try {
                if (-not $isInternal) {
                    # External User (No AD Lookup!)
                    $lstExtAccount.Invoke([Action] {
                        $lstExtAccount.Items.Add($listViewItem)
                        $tabExtAccount.Text = "External Accounts ($($lstExtAccount.Items.Count))"                        
                    })
                }
                else {
                    $adUser = & $GetADUserNetScriptBlock -samAccountName $samAccountName -adServer $adServer
                    if ($adUser) {
                        if ($adUser.Enabled) {
                            # Active User
                            $lstEnabled.Invoke([Action] {
                                #$listViewItem.SubItems.Add($email.ToString() + " - " + $adUser.Enabled) #<-- Test Area
                                $lstEnabled.Items.Add($listViewItem)
                                $tabEnabled.Text = "Active Accounts ($($lstEnabled.Items.Count))"
                            })
                        }
                        else {
                            # Disabled User
                            $lstDisabled.Invoke([Action] {
                                #$listViewItem.SubItems.Add($email.ToString() + " - " + $adUser.Enabled) #<-- Test Area
                                $lstDisabled.Items.Add($listViewItem)
                                $tabDisabled.Text = "Disabled Accounts ($($lstDisabled.Items.Count))"
                            })
                        }
                    }
                    else {
                        # User Not Found in AD
                        $lstNotFound.Invoke([Action] {
                            #$listViewItem.SubItems.Add($email.ToString() + " - " + $adUser.Enabled) #<-- Test Area
                            $lstNotFound.Items.Add($listViewItem)
                            $tabNotFound.Text = "Accounts Not Found ($($lstNotFound.Items.Count))"
                        })
                    }
                }
            }
            catch {
                # Only add to "Not Found" if it's an *actual error*
                #Write-Host "⚠️ Error processing user: $userObj"
            }

            # Update Progress Bar using UI thread
            if ($progressForm -ne $null) {
                $progressForm.Invoke([Action] {
                    $progressBar.Value = [math]::Round(($counter / $totalRows) * 100)
                })
            }
        }
        
        # Ensure progress form exists before closing
        if ($progressForm -and !$progressForm.IsDisposed) {
            $progressForm.Invoke([Action] {
                if ($progressForm.Visible) {
                    $progressForm.Close()
                }
            })
        }

        # Notifications
        if ($form -and !$form.IsDisposed) {
            if ($script:sync["CancelProcessing"]) {
                $form.Invoke([Action] {
                    # Show cancellation notification using the existing script block
                    & $ShowNotificationScriptBlock -Title "Processing Canceled" -Message "The Check User process was canceled by the user." -Icon "Warning"

                    # Optional: Play a system sound for cancellation
                    #[System.Media.SystemSounds]::Exclamation.Play()
                })

                # Re-enable the "Check Users" button
                $btnProcess.Invoke([Action] { $btnProcess.Enabled = $true })
                # Ensure "Export Results" remains disabled
                $btnExport.Invoke([Action] { $btnExport.Enabled = $false })
            }
            else {
                # Re-enable the "Check Users" button
                $btnProcess.Invoke([Action] { $btnProcess.Enabled = $true })

                # Force the Export button to show if data exists
                $form.Invoke([Action] {
                    $totalItems = $lstEnabled.Items.Count + $lstDisabled.Items.Count + $lstNotFound.Items.Count + $lstExtAccount.Items.Count
                    if ($totalItems -gt 0) {
                        $btnExport.Enabled = $true
                    } else {
                        $btnExport.Enabled = $false
                    }
                })

                # Show completion notification using the existing script block
                $form.Invoke([Action] {
                    & $ShowNotificationScriptBlock -Title "Processing Complete" -Message "The Check User process has finished successfully!" -Icon "Info"

                    # Optional: Play a system sound for completion
                    #[System.Media.SystemSounds]::Asterisk.Play()
                })
            }
        }
    }) | Out-Null

    # Pass Arguments to Runspace
    $runArg = ($txtFile.Text, $adServer, $InternalUPNs, $progressForm, $progressBar, $btnProcess, $script:sync, 
    $lstEnabled, $lstDisabled, $lstNotFound, $lstExtAccount, $GetADUserNetScriptBlock, $ShowNotificationScriptBlock,
    $lblStatus, $tabExtAccount, $tabEnabled, $tabDisabled, $tabNotFound, $btnExport, $form, $script:protocol)
    Foreach($Arg in $runArg){
        $psInstance.AddArgument($Arg)
    }

    # Start execution in the background
    $script:sync["ProcessingActive"] = $true
    $handle = $psInstance.BeginInvoke()
    
    # Process cleanup
    Start-Job -ScriptBlock {
        param($handle, $psInstance, $runspacePool)

        try {
            # Wait for the runspace to complete
            $handle.AsyncWaitHandle.WaitOne()

            # Ensure execution is finalized correctly
            $psInstance.EndInvoke($handle)
        }
        catch {
            # Log error if cleanup fails
            #Write-Host "⚠️ Error during cleanup: $_"
        }
        finally {
            # Ensure safe disposal AFTER process ends
            if ($psInstance) { $psInstance.Dispose() }
            if ($runspacePool) { 
                Start-Sleep -Milliseconds 500
                $runspacePool.Close()
                $runspacePool.Dispose()
            }

            # Run garbage collection to clean memory
            [System.GC]::Collect()
            [System.GC]::WaitForPendingFinalizers()
        }
    } -ArgumentList $handle, $psInstance, $runspacePool
})
$form.Controls.Add($btnProcess)

# Exit Button
$btnExit = New-Object System.Windows.Forms.Button
$btnExit.Text = "Exit"
#$btnExit.AutoSize = $true
$btnExit.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Regular)
$btnExit.Size = New-Object System.Drawing.Size(80, 30)  # Set Fixed Size
$btnExit.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 100), ($form.ClientSize.Height - 60))
$btnExit.Anchor = [System.Windows.Forms.AnchorStyles]::Bottom -bor [System.Windows.Forms.AnchorStyles]::Right
$btnExit.Add_Click({
    # Disable the button to prevent multiple clicks
    $btnExit.Enabled = $false

    # Immediately hide the form to make it feel instant
    if ($form -and !$form.IsDisposed) {
        $form.Invoke([Action] { $form.Hide() })
    }

    # Mark script as shutting down
    $script:sync["ShuttingDown"] = $true

    # Ensure background tasks are cleaned up
    Start-Job -ScriptBlock {
        param ($runspacePool)
        
        try {
            # If runspace pool is active, close it
            if ($runspacePool -and $runspacePool.Runspaces.Count -gt 0) {
                $runspacePool.Close()
                $runspacePool.Dispose()
            }
        }
        catch {
            # Log cleanup errors (optional)
            #Write-Host "⚠️ Error during exit cleanup: $_"
        }
        finally {$btnExport.Size = New-Object System.Drawing.Size(120, 35)  # Set Fixed Size
            # Ensure memory cleanup
            [System.GC]::Collect()
            [System.GC]::WaitForPendingFinalizers()
        }
    } -ArgumentList $runspacePool | Out-Null

    # Dispose of UI elements safely
    if ($stream) { $stream.Dispose() }

    # Close the form properly
    if ($form -and !$form.IsDisposed) {
        $form.Invoke([Action] { $form.Close() })
    }
})
$form.Controls.Add($btnExit)

$form.Add_Shown({
    Start-Sleep -Milliseconds 200 # Allow UI to fully render
    #Update-TabCounts
})

# Test LDAPS availability
if ($adServer -and (Test-LDAPSConnection -adServer $adServer)) {
    $script:protocol = "LDAPS"
    $connectionStatus.ForeColor = [System.Drawing.Color]::Green
    $connectionStatus.Text = "Connected via LDAPS (Secure)"
} else {
    $script:protocol = "LDAP"
    $connectionStatus.ForeColor = [System.Drawing.Color]::DarkOrange
    $connectionStatus.Text = "Connected via LDAP (Insecure)"
}

# Show GUI
$form.ShowDialog() | Out-Null